<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>ActivityRanking</web>
  <name>ScoreHistory</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>ActivityRanking.Scores</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1312203896000</creationDate>
  <date>1312207219000</date>
  <contentUpdateDate>1312207219000</contentUpdateDate>
  <version>1.1</version>
  <title>Score History for $request.user</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import org.xwiki.model.reference.*
def user = request.get("user")

if (user != null) {
  def userReference = services.componentManager.lookup(DocumentReferenceResolver.class).resolve(user);
  user = services.componentManager.lookup(EntityReferenceSerializer.class).serialize(userReference);
  def localUser = services.componentManager.lookup(EntityReferenceSerializer.class, "compactwiki").serialize(userReference);

  def userPageReference = new DocumentReference(xcontext.getDatabase(), "ActivityRanking", user);
  def totalScore = xwiki.getDocument(userPageReference).getObject("ActivityRanking.UserRankingClass", true).getProperty("score")?.getValue() ?: 0
  println "Total score: ${totalScore}"

  def events = xwiki.get("activitystream").searchEvents("(act.user = '${user}' OR act.user = '${localUser}') AND act.space &lt;&gt; 'ActivityRanking'", false, 25, 0)

  // Find all Ranking Rules Objects and call them  
  xcontext.put("events", events)     
  def rules = xwiki.getQueryManager().xwql("select doc, obj.rule, doc.syntaxId from Document doc, doc.object('ActivityRanking.RankingRuleClass') as obj where doc.space = 'ActivityRanking'").execute()

  println "|=Date|=Event Type|=Document|=Score|=Note"

  events.each() {
    def score = 0

    xcontext.put("event", it)
    rules.each() {
      try {
        // Using the actual document of the rule to render it. Can't use doc.getRenderedContent because it acts weirdly: All printlns after the call no longer print anything in the page but only in the the jetty console.
        def result = it[0].getRenderedContent(it[1], it[2], "plain/1.0", xcontext.getContext());
        score += Integer.parseInt(result.split(',')[0])
      }
      catch(Exception e) {
        println "{{code}}${it[0]} - ${it[1]}{{/code}} - ${e.getMessage()}"
      }
    }

    print "|${it.getDate()}|${it.getType()}|[[${it.getPage()}]]|${score}"
    if ("scoreModified" == it.getType()) {
      println "|$it.title"
    } else {
      println "| "
    }
  }
}

{{/groovy}}</content>
</xwikidoc>
