<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>ActivityRanking</web>
  <name>UpdateRankings</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Main.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1312190118000</creationDate>
  <date>1312206755000</date>
  <contentUpdateDate>1312206755000</contentUpdateDate>
  <version>1.1</version>
  <title>Update User Rankings</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import org.xwiki.model.reference.*
import org.xwiki.eventstream.*

def resolver = services.componentManager.getInstance(DocumentReferenceResolver.class);
def serializer = services.componentManager.getInstance(EntityReferenceSerializer.class);

def rankingDoc =  xwiki.getDocument("ActivityRanking.Ranking")
def lastUpdateObject = rankingDoc.getObject("ActivityRanking.RankingClass")
def lastUpdate = lastUpdateObject.getProperty("lastUpdate").getValue()
def formattedUpdateDate = xwiki.formatDate(lastUpdate, 'yyyy-MM-dd HH:mm:ss')
def currentDate = Calendar.getInstance().getTime()

// Cache for the user ranking
def ranks = [:]

// Process the events in batches to avoid OutOfMemoryExceptions
def batch = 300;
def currentIndex = 0;
def events = xwiki.get("activitystream").searchEvents("act.date &gt; '${formattedUpdateDate}' AND act.space &lt;&gt; 'ActivityRanking'", false, batch, currentIndex)
while (events.size() &gt; 0) {
  events.each() { event -&gt;
    def type = event.getType()
    def user = event.getUser()

    // There are a few "create" events with no user set. Watch out for them or Main.WebHome will be uses instead (due to the reference resolver of an empty reference).
    // We want to avoid counting scoreModified events since they are there just for history purpose.
    if (user != null &amp;&amp; user.size() != 0 &amp;&amp; !"scoreModified".equals(type)) {
      // Find all Ranking Rules Objects and call them
      xcontext.put("event", event)
      xcontext.put("events", events)
      def rules = services.query.xwql("select doc, obj.rule, doc.syntaxId from Document doc, doc.object('ActivityRanking.RankingRuleClass') as obj  where doc.space = 'ActivityRanking'").execute()
      rules.each() {
        def result = it[0].getRenderedContent(it[1], it[2], "plain/1.0", xcontext.context)

        // If the result does not start with a digit (disregarding the minus sign), then the rule did not execute correctly and an exception is displayed
        if (!Character.isDigit(result.trim().replace("-", "").charAt(0))) {
          println "Rule '${it[0]}' failed for event '${type}' by '${user}' on '${event.getPage()}[${event.getVersion()}]' at '${event.getDate()}' with the exception:"
          println "{{{${result}}}}"
        } else {
          try {
            result.split(',').eachWithIndex() { scoring, i -&gt;
              def scoringUser = user;
              int scoringValue;
              if (i == 0) {
                scoringValue = Integer.parseInt(scoring);
              } else {
                def otherScoring = scoring.split('=');
                scoringUser = otherScoring[0];
                scoringValue = Integer.parseInt(otherScoring[1]);

                // Fire a scoreModified event on behalf on the indirectly affected user so that it is properly accounted for in his score history
                fireScoreModifiedEvent(event, scoringUser, scoringValue, resolver, serializer)
              }

              // Use references to normalize the user string
              def scoringUserReference = resolver.resolve(scoringUser);
              scoringUser = serializer.serialize(scoringUserReference);

              Long score = ranks.get(scoringUser);
              if (score == null) {
                def userPageReference = new DocumentReference(xcontext.getDatabase(), "ActivityRanking", scoringUser);
                score = xwiki.getDocument(userPageReference).getObject("ActivityRanking.UserRankingClass", true).getProperty("score")?.getValue() ?: 0
              }

              score += scoringValue
              ranks.put(scoringUser, score)
            }
          } catch (Exception e) {
            println "Rule '${it[0]}' produced invalid results for event '${type}' by '${user}' on '${event.getPage()}[${event.getVersion()}]' at '${event.getDate()}' causing the exception:"
            println "{{{" + org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e) + "}}}"
          }
        }
      }
    }
  }

  // Get new batch
  currentIndex += events.size();
  events = xwiki.get("activitystream").searchEvents("act.date &gt; '${formattedUpdateDate}' AND act.space &lt;&gt; 'ActivityRanking'", false, batch, currentIndex)
}

// Update user score
ranks.each() { user, score -&gt;
  def userPageReference = new DocumentReference(xcontext.getDatabase(), "ActivityRanking", user);
  def userDoc = xwiki.getDocument(userPageReference)
  userDoc.getObject("ActivityRanking.UserRankingClass", true).set("score", score)
  userDoc.save("Update score", true)
  println "Updated score for ${user} ... new score ${score}"
}

// Update Last Updated Date
lastUpdateObject.set("lastUpdate", currentDate)
rankingDoc.save("Update last update date", true)

// Utility method to fire a scoreModified event.
def fireScoreModifiedEvent(causeEvent, affectedUser, scoreModifier, resolver, serializer) {
  def eventStream = services.componentManager.getInstance(EventStream.class)
  def eventFactory = services.componentManager.getInstance(EventFactory.class)

  def documentReference = resolver.resolve(causeEvent.getPage());
  def affectedUserReference = resolver.resolve(affectedUser);

  Event event = eventFactory.createEvent();
  event.setGroupId(causeEvent.getRequestId())
  event.setDate(causeEvent.getDate())

  event.setUser(affectedUserReference);
  event.setApplication("ActivityRanking");
  event.setType("scoreModified");
  event.setTitle("Score indirectly modified by the user [[${causeEvent.getUser()}]] on ${xwiki.formatDate(causeEvent.getDate(), 'yyyy-MM-dd HH:mm:ss')} (event type '${causeEvent.getType()}')");

  event.setStream(causeEvent.getPage());

  event.setWiki(documentReference.getWikiReference());
  try {
      event.setUrl(new URL(xwiki.getExternalURL(causeEvent.getPage(), "view", context)));
  } catch (Exception e) {
      //logger.error("Failed to get the score modifier event's URL.", e);
  }
  event.setSpace(documentReference.getLastSpaceReference());
  event.setDocument(documentReference);
  event.setDocumentVersion(causeEvent.getVersion());
  event.setDocumentTitle(causeEvent.getParam1());

  event.setRelatedEntity(resolver.resolve(causeEvent.getParam2()))

  event.setBody(String.valueOf(scoreModifier));
  event.setImportance(Event.Importance.MINOR);

  eventStream.addEvent(event);
}
{{/groovy}}</content>
</xwikidoc>
